Cmouse2.c
#include <stdio.h>
/////////////////
//   made by   //
// johu#hot.ee //
//.............//
/////////////////
#include <stdlib.h>
#include <math.h>
#include <strings.h>
#include <sys/time.h>
#define TEST_L testi_pikkus
#define TEST_L_DEF 100
#define EPS 0.000000001
#define T2PNE 1
#define EBAT2PNE 2
#define POLNUD 0
 
double testi_pikkus=1; // Sama mis TEST_L. Laua pikkus valitud põhiühikus
FILE *fout;
int xd=0,yd=0; //x/y movement delta
int xo=0,yo=0; //x/y overflow (out of range -255 to +255)
int lb=0,mb=0,rb=0,hs=0,vs=0; //left/middle/right mousebutton
long long int x=0, y=0, o; // normal couneter
long long int tx=0, ty=0; // teisendatud counter
double k=1, tk=1; // tegurid, sentimeetrit piksli kohta
double t1, t2; // timers
char oli_m66tmine; // Outputi juures meelde jätmiseks, kas mõõdeti
 
double sec(void){
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return tv.tv_sec+(double)(tv.tv_usec)/1000000.0;
}
 
void nulli(void) {
    x=0, y=0;
    tx=0, ty=0;
    t1 = sec();
    t2 = sec();
}
 
int teisendus(int a) {
	switch (a) {
		case (0):
			return 0;
		case (1):
			return 1;
		case (2):
			return 1;
		case (3):
			return 3;
		case (4):
			return 6;
		case (5):
			return 9;
		default:
			return 2*a;
	}
}
 
double s(double x, double y){
    return sqrt(x*x+y*y);
}
 
void output(void) {
 
    char s1[5]="", s2[5]="";
    if (abs(s(x,y)-TEST_L) < abs(s(tx,ty)-TEST_L))
        strcpy(s1,"<---");
    else
        strcpy(s2,"<---");
    system("clear");
    printf("%.3lf\n",TEST_L);
    printf("hs=%d,vs=%d,lb=%d rb=%d mb=%d xo=%d yo=%d xd=%d yd=%d\n",hs,vs,lb,rb,mb,xo,yo,xd,yd);
    printf("1/k  %.2lf, %s\n", 1/k,s1);
    printf("1/tk %.2lf, %s\n", 1/tk,s2);
    printf("row     x %6.lld y %6.lld s %6.2lf %s\n",     x,     y, s(    x    ,y),"");
    printf("normal  x %6.2lf y %6.2lf s %6.2lf %s\n",  x* k,  y* k, s( x* k, y* k),s1);
    //printf("shifted x %6.2lf y %6.2lf s %6.2lf %s\n", tx*tk, ty*tk, s(tx*tk,ty*tk),s2);
 
    /*printf("row     x %lld y %lld s %lf %s\n",     x,     y, s(    x    ,y),"");
    printf("normal  x %lf y %lf s %lf %s\n",  x* k,  y* k, s( x* k, y* k),s1);
    printf("shifted x %lf y %lf s %lf %s\n", tx*tk, ty*tk, s(tx*tk,ty*tk),s2);*/
 
    // Timetravel
    printf("\nLiikunud %5.2lf\n", t2-t1);
    printf("Mõõdetud kiirus: %.2lf y/s\n", s(x,y)*k/(t2-t1)/*, s(tx,ty)*tk/(t2-t1)*/);
    printf("Laualt   kiirus: %6.2lf y/s laualt viga: %4.2lf t2pne 1/k: %4.2lf 1/kv: %4.2lf k/v: %4.2lf\n", TEST_L/(t2-t1), s(x,y)*k-TEST_L, s(x,y)/TEST_L, s(x,y)*(t2-t1)/(TEST_L*TEST_L), s(x,y)/(t2-t1));
 
 
    if (rb&&((abs(x)/(s(y,x)+EPS) < 0.02) || abs(y)/(s(y,x)+EPS) < 0.02)){ // Kui viga on alla kahe protsendi
        //fprintf(stderr, "%6.4lf < %6.4lf\n", abs(x)/(s(y,x)+EPS), 0.02);
        fprintf(fout, "%6.2lf, %6.2lf, %6.2lf, %8.2f, %6.2f\n",
            TEST_L/(t2-t1), // Laualt kiirus
            s(x,y)*k-TEST_L, // Laualt viga, mõõdetud vagemaa ja tegeliku vahemaa erinevus
            s(x,y)/TEST_L, // Selle sõidu täpne 1/k
            s(x*k,y*k)/(t2-t1), // Mõõdetid kiirus
            s(x,y)*k, // Mõõdetud vahemaa
            (t2-t1) // Mõõdetud vahemaa
        );
        oli_m66tmine=T2PNE;
        nulli();
    }
    else if (rb) {
        oli_m66tmine=EBAT2PNE;
        nulli();
    }
    printf("Viimane mõõtmine: %s\n",(oli_m66tmine!=T2PNE?oli_m66tmine?"ebatäpne":"":"TÄPTNE"));
    if (oli_m66tmine)
 
    return;
}
 
void parse_mouse(char *b) {
    lb=(b[0]&1)>0;
    rb=(b[0]&2)>0;
    mb=(b[0]&4)>0;
    hs=(b[0]&16)>0;
    vs=(b[0]&32)>0;
    xo=(b[0]&64)>0;
    yo=(b[0]&128)>0;
    xd=b[1];
    yd=b[2];
}
 
main(int argc, char *argv[]){
    // time preinit
    t1 = sec();
    t2 = sec();
    // arguments
    if (argc>1)
        TEST_L=atoi(argv[1]); // Argumendiks testlõigu pikkus vabalt valitud ühikutes. Hetkel INT ainult!
    else
        TEST_L=TEST_L_DEF;
    // files
    FILE *fmouse;
    fmouse = fopen("/dev/input/mouse1","r");
    if (!fmouse)
        printf("Hiire avamine ebaõnnestus.\n");
    char b[3]; // mouse buffer
 
    fout = fopen("./log.csv","a");
    if (!fout)
        printf("Väljundfaili ei saa avada\n");
    fprintf(fout,"Laualt v, laualt viga, 1/k, mõõdetud v, mõõdetus s, mõõdetud t\n");
 
    // loop
    while(1){
        // Lugemine
        if (!fmouse)
            printf("Hiire fail katki\n");
        fread(b,sizeof(char),3,fmouse);
        // Kui seni liikumist ei olnud, siis nullime aja. Siis ei lähe liikumise ootamine aja sisse
        if (!x && !y)
            t1 = sec(); // Ainult siis kui pole veel liikunud
        parse_mouse(b); // Lammutab bittid laiali globaalsetesse muutujatesse
        x+=xd; y+=yd; // Ilma teisendusteta
        if (xd || yd) {
            t2 = sec(); // Ainult siis, kui liigub
            oli_m66tmine=POLNUD;
        }
        tx+=teisendus(xd); ty+=teisendus(yd); // Mõtetute teisendustega
        o+=xo+yo; // Overflow bitid. Sinna ei teki vist midagi.
        // Ivendid
        // Nupud
        if (lb) {
            if (mb)
                break;
            nulli();
        }
        if (mb) {
            k  = (s( x, y)!=0) ? TEST_L/s( x, y) : 1;
            tk = (s(tx,ty)!=0) ? TEST_L/s(tx,ty) : 1;
        }
        // Output
        output();
        fflush(fout);
    }
    fclose(fout);
    fclose(fmouse);
}